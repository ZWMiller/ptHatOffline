// Fraction Fit - Z. Miller Sep 1, 2015
//
// .L fractionFit.C
// fractionFit() 
// takes output of offline.C (pythia version, and data version) as inputs.
// Copy current best data and templates as "current%s.root" {B,C,Data}

#include "anaConst.h"

Bool_t checkMakePDF();
char FileName[100];

void fractionFit()
{
  
  gStyle->SetOptFit(1111);

   Bool_t makePDF = checkMakePDF();
  
  char name[1000];
  sprintf(name,"/Users/zach/Research/pythia/ptHatTemplate/outputs/currentB.root");
  TFile *fB = new TFile(name,"READ");
  sprintf(name,"/Users/zach/Research/pythia/ptHatTemplate/outputs/currentC.root");
  TFile *fC = new TFile(name,"READ");
   sprintf(name,"/Users/zach/Research/rootFiles/run12NPEhPhi/currentData.root");
  TFile *fD = new TFile(name,"READ");
  if (fB->IsOpen()==kFALSE || fC->IsOpen()==kFALSE)
    { std::cout << "!!!!!! Either B,C, or Data File not found !!!!!!" << std::endl
		<< "Looking for currentB.root, currentC.root, and currentData.root" << std::endl;
      exit(1); }
  
  // Set constants and projection bins (from header file anaConst, analysis constants)
  const Int_t numPtBins = anaConst::nPtBins;
  Float_t lowpt[numPtBins],highpt[numPtBins];
  for(Int_t c=0; c< numPtBins; c++){
    lowpt[c] = anaConst::lpt[c];
    highpt[c] = anaConst::hpt[c];
  }
  Float_t hptCut=anaConst::hptCut;
  Double_t p00[numPtBins],p01[numPtBins],p20[numPtBins],p21[numPtBins];
  Double_t e00[numPtBins],e01[numPtBins],e20[numPtBins],e21[numPtBins];
  Double_t pC0[numPtBins],pC1[numPtBins],eC0[numPtBins],eC1[numPtBins];
  Double_t Rb0[numPtBins],Rb2[numPtBins],RbC[numPtBins],pT[numPtBins];
  Double_t eb0[numPtBins],eb2[numPtBins],ebC[numPtBins],dx[numPtBins];
  Double_t ptOFF1[numPtBins],ptOFF2[numPtBins];
  Int_t rangeLow  = 86;  //22-29 for near-side only
  Int_t rangeHigh = 116; //18-33 for -pi,pi
  Int_t plotCount0 = 0, plotCount2 = 0, plotCount = 0;
  
  // Make Canvases
  TCanvas* deltaPhi  = new TCanvas("deltaPhi","Pythia Delta Phi",150,0,1150,1000);
  TCanvas* fitResult0 = new TCanvas("fitResult0","RB Extraction HT0",150,0,1150,1000);
  TCanvas* fitResult2 = new TCanvas("fitResult2","RB Extraction HT2",150,0,1150,1000);
  TCanvas* fitResultC = new TCanvas("fitResultC","RB Extraction Combined Trigs",150,0,1150,1000);
  deltaPhi->Divide(3,2);
  fitResult0->Divide(3,2);
  fitResult2->Divide(3,2);
  fitResultC->Divide(3,2);

  // Make histos
  TH1D* projB[numPtBins];
  TH1D* projC[numPtBins];
  TH1D* projData0[numPtBins];
  TH1D* projData2[numPtBins];
  TH1D* combData[numPtBins];
  TH1D* plotD0[numPtBins];
  TH1D* plotD2[numPtBins];
  TH1D* plotC[numPtBins];
  TH1D* plotB[numPtBins];
  TH1F* histoNorms;
  TH1F* bPtNorms;
  TH1F* cPtNorms;
  
  // Get and Draw histos
  TPaveText* lbl[numPtBins];
  TPaveText* stat[3][numPtBins];
  char statLabel[100];
  char textLabel[100];
  Int_t plotbin;
  Float_t norm0,norm2,normB,normC;

  // Get ptbin independent hists
  histoNorms = (TH1F*)fD->Get("histoNorms");
  bPtNorms   = (TH1F*)fB->Get("ptNorm");
  cPtNorms   = (TH1F*)fC->Get("ptNorm");
  
  for(Int_t ptbin=0; ptbin<6; ptbin++)
    {
      norm0 = histoNorms->GetBinContent(histoNorms->GetBin(1,ptbin+1));
      norm2 = histoNorms->GetBinContent(histoNorms->GetBin(3,ptbin+1));
      normB = bPtNorms->GetBinContent(bPtNorms->GetBin(ptbin+1));
      normC = cPtNorms->GetBinContent(cPtNorms->GetBin(ptbin+1));
      
      plotbin = ptbin;
      // Init necessary plotting tools
      lbl[ptbin] = new TPaveText(.25,.8,.5,.88,Form("NB NDC%i",ptbin));
      sprintf(textLabel,"%.1f < P_{T,e} < %.1f",lowpt[ptbin],highpt[ptbin]);
      lbl[ptbin]->AddText(textLabel);
      lbl[ptbin]->SetFillColor(kWhite);

      projB[ptbin] = (TH1D*)fB->Get(Form("delPhi_%i",ptbin));
      projC[ptbin] = (TH1D*)fC->Get(Form("delPhi_%i",ptbin));
      projData0[ptbin]= (TH1D*)fD->Get(Form("NPEhDelPhi_0_%i",ptbin));
      projData2[ptbin]= (TH1D*)fD->Get(Form("NPEhDelPhi_2_%i",ptbin));
      // Do any rebinning
      Int_t RB = 1;
      projB[ptbin]->Rebin(RB);
      projC[ptbin]->Rebin(RB);
      projData0[ptbin]->Rebin(RB);
      projData2[ptbin]->Rebin(RB);

      // Clone to make plots without effecting fits
      plotD0[ptbin] = (TH1D*) projData0[ptbin]->Clone();
      plotD2[ptbin] = (TH1D*) projData2[ptbin]->Clone();
      plotB[ptbin]  = (TH1D*) projB[ptbin]->Clone();
      plotC[ptbin]  = (TH1D*) projC[ptbin]->Clone();

      // Set features that are the same in plots
      projData0[ptbin]->SetLineColor(kBlue);
      projData2[ptbin]->SetLineColor(kGreen+3);
      projB[ptbin]->SetLineColor(kRed);
      projC[ptbin]->SetLineColor(kBlack);
      projC[ptbin]->GetXaxis()->SetRangeUser(-3.5,3.5);
      plotD0[ptbin]->SetLineColor(kBlue);
      plotD2[ptbin]->SetLineColor(kGreen+3);
      plotD0[ptbin]->SetMarkerStyle(20);
      plotD0[ptbin]->SetMarkerColor(kBlue);
      plotD0[ptbin]->SetMarkerSize(0.4);
      plotB[ptbin]->SetLineColor(kRed);
      plotC[ptbin]->SetLineColor(kBlack);
      plotC[ptbin]->GetXaxis()->SetRangeUser(-3.5,3.5);
     
      // Normalize
      Float_t nScale = 1000;
      projB[ptbin] ->Scale(nScale/normB);
      projC[ptbin] ->Scale(nScale/normC);
      plotD0[ptbin]->Scale(1/norm0);
      plotD2[ptbin]->Scale(1/norm2);
      plotB[ptbin] ->Scale(1/normB);
      plotC[ptbin] ->Scale(1/normC);
      
      // Draw Templates on own plots
      deltaPhi->cd(plotbin+1);
      plotC[ptbin]  -> Draw("hist");
      plotB[ptbin]  -> Draw("same hist");
      plotD0[ptbin] -> Draw("same");
      plotD2[ptbin] -> Draw("same");
      lbl[ptbin]    -> Draw("same");

      TLegend* leg = new TLegend(0.5,0.73,0.85,0.85);
      leg->AddEntry(projB[ptbin],"b#bar{b}->NPE","lpe");
      leg->AddEntry(projC[ptbin],"c#bar{c}->NPE","lpe");
      leg->AddEntry(projData0[ptbin],"HT0","lpe");
      leg->AddEntry(projData2[ptbin],"HT2","lpe");
      leg->Draw();

      combData[ptbin] = (TH1D*) projData0[ptbin]->Clone();
      combData[ptbin] -> Add(projData2[ptbin]);
      combData[ptbin]->SetLineColor(kBlue);
      combData[ptbin]->SetMarkerStyle(20);
      combData[ptbin]->SetMarkerColor(kBlue);
      combData[ptbin]->SetMarkerSize(0.4);
      combData[ptbin]->SetTitle("");

      // Do the actual fit
      TObjArray *mc = new TObjArray(2);   // MC histograms are put in this array
      mc->Add(projC[ptbin]);
      mc->Add(projB[ptbin]);

      fitResult0->cd(ptbin+1);
      TFractionFitter* fit = new TFractionFitter(projData0[ptbin], mc,"V"); // initialise
      fit->Constrain(0,0.0,1.0);
      fit->Constrain(1,0.0,1.0);               // constrain fraction 1 to be between 0 and 1
      fit->SetRangeX(rangeLow,rangeHigh);      // use only the first 15 bins in the fit
      Int_t status = fit->Fit();               // perform the fit
      std::cout << "fit status: " << status << std::endl;
      if (status == 0) {                       // check on fit status
	TH1F* result = (TH1F*) fit->GetPlot();
	TH1F* MCPred0 = (TH1F*) fit->GetMCPrediction(0);
	TH1F* MCPred1 = (TH1F*) fit->GetMCPrediction(1);
	result ->Scale(1./norm0);
	MCPred0->Scale(result->GetMaximum()/MCPred0->GetMaximum());
	MCPred1->Scale(result->GetMaximum()/MCPred1->GetMaximum());
	MCPred0->SetLineColor(kRed);
	MCPred1->SetLineColor(40);
	MCPred0->SetMarkerColor(kRed);
	MCPred1->SetMarkerColor(40);
	MCPred0->SetMarkerStyle(22);
	MCPred1->SetMarkerStyle(23);
	plotD0[ptbin]->GetXaxis()->SetRangeUser(-3.5,3.5);
	//	plotD0[ptbin]->GetYaxis()->SetRangeUser(0,0.5);
	//projData0[ptbin]->GetYaxis()->SetRangeUser(0,1);
	//projData0[ptbin]->Draw("Ep");
	plotD0[ptbin]->Draw("Ep");
	result->SetLineColor(kBlack);
	result->SetFillColor(kWhite);
	result->Draw("sames");
	MCPred0->Draw("same hist");
	MCPred1->Draw("same hist");
	lbl[ptbin]->Draw("same");
	fit->GetResult(0,p00[ptbin],e00[ptbin]);
	fit->GetResult(1,p01[ptbin],e01[ptbin]);
	Double_t chi2 = fit->GetChisquare();
	Int_t ndf = fit->GetNDF();
	stat[0][ptbin] = new TPaveText(.7,.7,1,1,Form("NB NDC%i",ptbin));
	sprintf(statLabel,"Chi2: %f",chi2);
	stat[0][ptbin]->InsertText(statLabel);
	sprintf(statLabel,"NDF: %i",ndf);
	stat[0][ptbin]->InsertText(statLabel);
	sprintf(statLabel,"Rb: %f",p01[ptbin]);
	stat[0][ptbin]->InsertText(statLabel);
	sprintf(statLabel,"eB: %f",e01[ptbin]);
	stat[0][ptbin]->InsertText(statLabel);
	stat[0][ptbin]->SetFillColor(kWhite);
	stat[0][ptbin]->Draw("same");
      }

      
      fitResult2->cd(ptbin+1);
      TFractionFitter* fit2 = new TFractionFitter(projData2[ptbin], mc); // initialise
      fit2->Constrain(0,0.0,1.0);              // constrain fraction 0
      fit2->Constrain(1,0.0,1.0);              // constrain fraction 1 to be between 0 and 1
      fit2->SetRangeX(rangeLow,rangeHigh);     // use only the first 15 bins in the fit
      Int_t status2 = fit2->Fit();             // perform the fit
      std::cout << "fit status: " << status2 << std::endl;
      if (status2 == 0) {                       // check on fit status
	TH1F* result2 = (TH1F*) fit2->GetPlot();
	projData2[ptbin]->GetXaxis()->SetRangeUser(-3.5,3.5);
	//projData2[ptbin]->GetYaxis()->SetRangeUser(0,1);
	projData2[ptbin]->Draw("Ep");
	result2->SetLineColor(kBlack);
	result2->SetFillColor(kWhite);
	result2->Draw("sames");
	lbl[ptbin]->Draw("same");
	fit2->GetResult(0,p20[ptbin],e20[ptbin]);
	fit2->GetResult(1,p21[ptbin],e21[ptbin]);
	Double_t chi2 = fit2->GetChisquare();
	Int_t ndf = fit2->GetNDF();
	stat[1][ptbin] = new TPaveText(.7,.7,1,1,Form("NB NDC%i",ptbin));
	sprintf(statLabel,"Chi2: %f",chi2);
	stat[1][ptbin]->InsertText(statLabel);
	sprintf(statLabel,"NDF: %i",ndf);
	stat[1][ptbin]->InsertText(statLabel);
	sprintf(statLabel,"Rb: %f",p21[ptbin]);
	stat[1][ptbin]->InsertText(statLabel);
	sprintf(statLabel,"eB: %f",e21[ptbin]);
	stat[1][ptbin]->InsertText(statLabel);
	stat[1][ptbin]->SetFillColor(kWhite);
	stat[1][ptbin]->Draw("same");
      }

      fitResultC->cd(ptbin+1);
      TFractionFitter* fitC = new TFractionFitter(combData[ptbin], mc); // initialise
      fitC->Constrain(0,0.0,1.0);              // constrain fraction 0
      fitC->Constrain(1,0.0,1.0);              // constrain fraction 1 to be between 0 and 1
      fitC->SetRangeX(rangeLow,rangeHigh);     // use only the first 15 bins in the fit
      Int_t statusC = fitC->Fit();             // perform the fit
      std::cout << "fit status: " << statusC << std::endl;
      if (statusC == 0) {                       // check on fit status
        TH1F* resultC = (TH1F*) fitC->GetPlot();
	TH1F* MCPred0C = (TH1F*) fitC->GetMCPrediction(0);
	TH1F* MCPred1C = (TH1F*) fitC->GetMCPrediction(1);
	resultC ->Scale(1./(norm0+norm2));
	MCPred0C->Scale(resultC->GetMaximum()/MCPred0C->GetMaximum());
	MCPred1C->Scale(resultC->GetMaximum()/MCPred1C->GetMaximum());
	MCPred0C->SetLineColor(kRed);
	MCPred1C->SetLineColor(40);
	MCPred0C->SetMarkerColor(kRed);
	MCPred1C->SetMarkerColor(40);
	MCPred0C->SetMarkerStyle(22);
	MCPred1C->SetMarkerStyle(23);
	combData[ptbin]->GetXaxis()->SetRangeUser(-3.5,3.5);
	combData[ptbin]->Scale(1/(norm0+norm2));
	//plotD0[ptbin]->GetYaxis()->SetRangeUser(0,0.5);
	//projData0[ptbin]->GetYaxis()->SetRangeUser(0,1);
	//projData0[ptbin]->Draw("Ep");
	combData[ptbin]->Draw("Ep");
	resultC->SetLineColor(kBlack);
	resultC->SetFillColor(kWhite);
	resultC->Draw("sames");
	MCPred0C->Draw("same hist");
	MCPred1C->Draw("same hist");
	lbl[ptbin]->Draw("same");
	fitC->GetResult(0,pC0[ptbin],eC0[ptbin]);
	fitC->GetResult(1,pC1[ptbin],eC1[ptbin]);
	Double_t chi2 = fitC->GetChisquare();
	Int_t ndf = fitC->GetNDF();
	stat[2][ptbin] = new TPaveText(.7,.7,1,1,Form("NB NDC%i",ptbin));
	sprintf(statLabel,"Chi2: %f",chi2);
	stat[2][ptbin]->InsertText(statLabel);
	sprintf(statLabel,"NDF: %i",ndf);
	stat[2][ptbin]->InsertText(statLabel);
	sprintf(statLabel,"Rb: %f",pC1[ptbin]);
	stat[2][ptbin]->InsertText(statLabel);
	sprintf(statLabel,"eB: %f",eC1[ptbin]);
	stat[2][ptbin]->InsertText(statLabel);
	stat[2][ptbin]->SetFillColor(kWhite);
	stat[2][ptbin]->Draw("same");
      }

      pT[ptbin] = (lowpt[ptbin]+highpt[ptbin])/2.;
      dx[ptbin] = 0;
      RbC[ptbin] = pC1[ptbin]/(pC1[ptbin]+pC0[ptbin]);
      ebC[ptbin] = eC1[ptbin];
      plotCount++;
      
      // Only plot ranges where the statistics are decent, for cleanliness
      if(1)//pT[ptbin] < 5)
	{
	  ptOFF1[plotCount0] = pT[ptbin]-0.1;
	  Rb0[plotCount0] = p01[ptbin]/(p01[ptbin]+p00[ptbin]);
	  eb0[plotCount0] = e01[ptbin];
	  plotCount0++;
	}
      if(1)//pT[ptbin] > 3)
	{
	  ptOFF2[plotCount2] = pT[ptbin]+0.1;
	  Rb2[plotCount2] = p21[ptbin]/(p21[ptbin]+p20[ptbin]);
	  eb2[plotCount2] = e21[ptbin];
	  plotCount2++;
	}
    
      // Wrong for p1 = 1-p0
      /* eb0[ptbin] = sqrt(pow((p00[ptbin]/pow((p00[ptbin]+p01[ptbin]),2)*e00[ptbin]),2)+pow((p01[ptbin]/pow((p00[ptbin]+p01[ptbin]),2)*e01[ptbin]),2));
      eb2[ptbin] = sqrt(pow((p20[ptbin]/pow((p20[ptbin]+p21[ptbin]),2)*e20[ptbin]),2)+pow((p21[ptbin]/pow((p20[ptbin]+p21[ptbin]),2)*e21[ptbin]),2));
      ebC[ptbin] = sqrt(pow((pC0[ptbin]/pow((pC0[ptbin]+pC1[ptbin]),2)*eC0[ptbin]),2)+pow((pC1[ptbin]/pow((pC0[ptbin]+pC1[ptbin]),2)*eC1[ptbin]),2));*/
      
    }

  // Get FONLL Calc
  Int_t l=0;
  char line[1000];
  Float_t xF[100],yF[100],minF[100],maxF[100];
  ifstream fp("/Users/zach/Research/pythia/ptHatTemplate/FONLL.txt",ios::in);
  while (!fp.eof()){
    fp.getline(line,1000);
    sscanf(line,"%f %f %f %f",&xF[l],&yF[l],&minF[l],&maxF[l]);
    //  printf("L: %f %f\n",xF[l],yF[l]);
    l++;
  }
  fp.close();

  // Get Previous Analysis 
  Int_t p=0;
  Float_t xP[100],yP[100],dyP[100];
  ifstream fp1("/Users/zach/Research/pythia/ptHatTemplate/run5_6.txt",ios::in);
  while (!fp1.eof()){
    fp1.getline(line,1000);
    sscanf(line,"%f %f %f",&xP[p],&yP[p],&dyP[p]);
    // printf("L: %f %f\n",xF[l],yF[l]);
    p++;
  }
  fp1.close();
  
  TCanvas* c1 = new TCanvas("c1","Bottom Contribution",150,0,1150,1000);
  TGraphErrors *gr0     = new TGraphErrors(plotCount0-1,ptOFF2,Rb0,dx,eb0);
  TGraphErrors *gr2     = new TGraphErrors(plotCount2-1,ptOFF1,Rb2,dx,eb2);
  TGraphErrors *grC     = new TGraphErrors(plotCount-1,pT,RbC,dx,ebC);
  TGraphErrors *grF     = new TGraphErrors(l-1,xF,yF);
  TGraphErrors *grFmax  = new TGraphErrors(l-1,xF,maxF);
  TGraphErrors *grFmin  = new TGraphErrors(l-1,xF,minF);
  TGraphErrors *grP     = new TGraphErrors(p-1,xP,yP,0,dyP);

  c1->cd(1);

  grC->SetTitle("Bottom Contribution");
  grC->GetXaxis()->SetTitle("p_{T,e}");
  grC->GetYaxis()->SetTitle("#frac{r_{B}}{(r_{B}+r_{C})}");
  gr0->SetMarkerStyle(20);
  gr0->SetMarkerSize(1);
  gr0->SetLineColor(kBlue);
  gr0->SetMarkerColor(kBlue);
  gr2->SetMarkerStyle(22);
  gr2->SetMarkerSize(1);
  gr2->SetLineColor(kGreen+3);
  gr2->SetMarkerColor(kGreen+3);
  grC->SetMarkerStyle(21);
  grC->SetMarkerSize(1);
  grC->SetLineColor(kRed);
  grC->SetMarkerColor(kRed);
  grC->GetXaxis()->SetRangeUser(1,14);
  grC->GetYaxis()->SetRangeUser(0,1);
  grF->SetLineStyle(1);
  grFmax->SetLineStyle(2);
  grFmin->SetLineStyle(2);
  grP->SetMarkerStyle(33);
  grP->SetMarkerColor(kBlack);
  
  grC->Draw("AP");
  gr2->Draw("same P");
  gr0->Draw("same P");
  grF->Draw("same");
  grFmax->Draw("same");
  grFmin->Draw("same");
  grP->Draw("same P");

  TLegend* leg2 = new TLegend(0.15,0.68,0.4,0.85);
  leg2->AddEntry(gr0,"High Tower 0 Trigs","pe");
  leg2->AddEntry(gr2,"High Tower 2 Trigs","pe");
  leg2->AddEntry(grC,"Combined Trigs","pe");
  leg2->AddEntry(grF,"FONLL (Uncertainty: Scale Only)","l");
  leg2->AddEntry(grP,"Run 5/6 Analysis (Stat Uncertainty)","pe");
  leg2->Draw("same");
  
   // Make PDF with output canvases
  if(makePDF)
    {
      //Set front page
      TCanvas* fp = new TCanvas("fp","Front Page",100,0,1000,900);
      fp->cd();
      TBox *bLabel = new TBox(0.01, 0.88, 0.99, 0.99);
      bLabel->SetFillColor(38);
      bLabel->Draw();
      TLatex tl;
      tl.SetNDC();
      tl.SetTextColor(kWhite);
      tl.SetTextSize(0.033);
      char tlName[100];
      char tlName2[100];
      
      TString titlename = FileName;
      int found = titlename.Last('/');
      if(found >= 0){
	titlename.Replace(0, found+1, "");
      } 
      sprintf(tlName, "RUN 12 NPE-h   #Delta#phi Correlations");
      tl.SetTextSize(0.05);
      tl.SetTextColor(kWhite);
      tl.DrawLatex(0.05, 0.92,tlName);
      
      TBox *bFoot = new TBox(0.01, 0.01, 0.99, 0.12);
      bFoot->SetFillColor(38);
      bFoot->Draw();
      tl.SetTextColor(kWhite);
      tl.SetTextSize(0.05);
      tl.DrawLatex(0.05, 0.05, (new TDatime())->AsString());
      tl.SetTextColor(kBlack);
      tl.SetTextSize(0.03);
      tl.DrawLatex(0.1, 0.14, titlename);
      sprintf(tlName,"TEST");
      tl.DrawLatex(0.1, 0.8,tlName);
      
      // Place canvases in order
      TCanvas* temp = new TCanvas();
      sprintf(name, "FFOutput/%s.pdf[", FileName);
      temp->Print(name);
      sprintf(name, "FFOutput/%s.pdf", FileName);

      temp = deltaPhi; 
      temp->Print(name);
      temp = fitResult0;
      temp->Print(name);
      temp = fitResult2;
      temp->Print(name);
      temp = fitResultC;
      temp->Print(name);
      temp = c1;
      temp->Print(name);
      
      sprintf(name, "FFOutput/%s.pdf]", FileName);
      temp->Print(name);
    }
}

Bool_t checkMakePDF(){

  // Set option for pdf creation
  Int_t number = 2; Bool_t fmakePDF = kTRUE;
  while(number > 1 || number < 0){
    std::cout << "Make PDF? [default: 1]: ";
    std::string input;
    std::getline( std::cin, input );
    if ( !input.empty() ){
      std::istringstream stream( input );
      stream >> number;
      if(number == 0)
	fmakePDF = kFALSE;
      if(number == 1)
	fmakePDF = kTRUE;
    }
    else
      number = 1; 
  }
  if(fmakePDF) // need a file name if making pdf
    {
      cout << "Need FileName (no ext.): ";
      std::string input2;
      std::getline( std::cin, input2 );
      if ( !input2.empty() ){
	std::istringstream stream2( input2 );
	string s = stream2.str();
	sprintf(FileName,"%s",s.c_str());
      }
      else
	{
	  sprintf(FileName, "test");
	}
    }

  return fmakePDF;
}
